// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package backend

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[backend.Foo](node)
val document = scalaxb.toXML[backend.Foo](obj, "foo", backend.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://WebXml.com.cn/",
    Some("tns") -> "http://WebXml.com.cn/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Backend_GetSupportCityFormat: scalaxb.XMLFormat[backend.GetSupportCity] = new DefaultBackend_GetSupportCityFormat {}
  implicit lazy val Backend_GetSupportCityResponseFormat: scalaxb.XMLFormat[backend.GetSupportCityResponse] = new DefaultBackend_GetSupportCityResponseFormat {}
  implicit lazy val Backend_ArrayOfStringFormat: scalaxb.XMLFormat[backend.ArrayOfString] = new DefaultBackend_ArrayOfStringFormat {}
  implicit lazy val Backend_GetSupportProvinceFormat: scalaxb.XMLFormat[backend.GetSupportProvince] = new DefaultBackend_GetSupportProvinceFormat {}
  implicit lazy val Backend_GetSupportProvinceResponseFormat: scalaxb.XMLFormat[backend.GetSupportProvinceResponse] = new DefaultBackend_GetSupportProvinceResponseFormat {}
  implicit lazy val Backend_GetSupportDataSetFormat: scalaxb.XMLFormat[backend.GetSupportDataSet] = new DefaultBackend_GetSupportDataSetFormat {}
  implicit lazy val Backend_GetSupportDataSetResultFormat: scalaxb.XMLFormat[backend.GetSupportDataSetResult] = new DefaultBackend_GetSupportDataSetResultFormat {}
  implicit lazy val Backend_GetSupportDataSetResponseFormat: scalaxb.XMLFormat[backend.GetSupportDataSetResponse] = new DefaultBackend_GetSupportDataSetResponseFormat {}
  implicit lazy val Backend_GetWeatherbyCityNameFormat: scalaxb.XMLFormat[backend.GetWeatherbyCityName] = new DefaultBackend_GetWeatherbyCityNameFormat {}
  implicit lazy val Backend_GetWeatherbyCityNameResponseFormat: scalaxb.XMLFormat[backend.GetWeatherbyCityNameResponse] = new DefaultBackend_GetWeatherbyCityNameResponseFormat {}
  implicit lazy val Backend_GetWeatherbyCityNameProFormat: scalaxb.XMLFormat[backend.GetWeatherbyCityNamePro] = new DefaultBackend_GetWeatherbyCityNameProFormat {}
  implicit lazy val Backend_GetWeatherbyCityNameProResponseFormat: scalaxb.XMLFormat[backend.GetWeatherbyCityNameProResponse] = new DefaultBackend_GetWeatherbyCityNameProResponseFormat {}
  implicit lazy val Backend_DataSetFormat: scalaxb.XMLFormat[backend.DataSet] = new DefaultBackend_DataSetFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("DataSet"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.DataSet](elem)))
      case (Some("getWeatherbyCityNameProResponse"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetWeatherbyCityNameProResponse](elem)))
      case (Some("getWeatherbyCityNameResponse"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetWeatherbyCityNameResponse](elem)))
      case (Some("getSupportDataSetResponse"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportDataSetResponse](elem)))
      case (Some("getSupportProvinceResponse"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportProvinceResponse](elem)))
      case (Some("getSupportCityResponse"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportCityResponse](elem)))
      case (Some("getSupportCity"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportCity](elem)))
      case (Some("getSupportProvince"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportProvince](elem)))
      case (Some("getSupportDataSet"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetSupportDataSet](elem)))
      case (Some("getWeatherbyCityName"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetWeatherbyCityName](elem)))
      case (Some("getWeatherbyCityNamePro"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.GetWeatherbyCityNamePro](elem)))
      case (Some("ArrayOfString"), Some("http://WebXml.com.cn/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[backend.ArrayOfString](elem)))

      case _ => None
    }
  }

  trait DefaultBackend_GetSupportCityFormat extends scalaxb.ElemNameParser[backend.GetSupportCity] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetSupportCity] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "byProvinceName")) ^^
      { case p1 =>
      backend.GetSupportCity(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetSupportCity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.byProvinceName map { scalaxb.toXML[String](_, Some("http://WebXml.com.cn/"), Some("byProvinceName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetSupportCityResponseFormat extends scalaxb.ElemNameParser[backend.GetSupportCityResponse] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetSupportCityResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "getSupportCityResult")) ^^
      { case p1 =>
      backend.GetSupportCityResponse(p1.headOption map { scalaxb.fromXML[backend.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetSupportCityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportCityResult map { scalaxb.toXML[backend.ArrayOfString](_, Some("http://WebXml.com.cn/"), Some("getSupportCityResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_ArrayOfStringFormat extends scalaxb.ElemNameParser[backend.ArrayOfString] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    override def typeName: Option[String] = Some("ArrayOfString")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.ArrayOfString] =
      phrase(safeRep(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "string")) ^^
      { case p1 =>
      backend.ArrayOfString(p1 map { _.nilOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }}) })
    
    def writesChildNodes(__obj: backend.ArrayOfString, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.string flatMap { scalaxb.toXML[Option[String]](_, Some("http://WebXml.com.cn/"), Some("string"), __scope, false) })

  }

  trait DefaultBackend_GetSupportProvinceFormat extends scalaxb.XMLFormat[backend.GetSupportProvince] with scalaxb.CanWriteChildNodes[backend.GetSupportProvince] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, backend.GetSupportProvince] = seq match {
      case node: scala.xml.Node => Right(backend.GetSupportProvince())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: backend.GetSupportProvince, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBackend_GetSupportProvinceResponseFormat extends scalaxb.ElemNameParser[backend.GetSupportProvinceResponse] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetSupportProvinceResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "getSupportProvinceResult")) ^^
      { case p1 =>
      backend.GetSupportProvinceResponse(p1.headOption map { scalaxb.fromXML[backend.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetSupportProvinceResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportProvinceResult map { scalaxb.toXML[backend.ArrayOfString](_, Some("http://WebXml.com.cn/"), Some("getSupportProvinceResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetSupportDataSetFormat extends scalaxb.XMLFormat[backend.GetSupportDataSet] with scalaxb.CanWriteChildNodes[backend.GetSupportDataSet] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, backend.GetSupportDataSet] = seq match {
      case node: scala.xml.Node => Right(backend.GetSupportDataSet())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: backend.GetSupportDataSet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultBackend_GetSupportDataSetResultFormat extends scalaxb.ElemNameParser[backend.GetSupportDataSetResult] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetSupportDataSetResult] =
      phrase((any(_ => true)) ~ 
      (any(_ => true)) ^^
      { case p1 ~ p2 =>
      backend.GetSupportDataSetResult(scalaxb.fromXML[scalaxb.DataRecord[Any]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: backend.GetSupportDataSetResult, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.schema) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.any) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get)

  }

  trait DefaultBackend_GetSupportDataSetResponseFormat extends scalaxb.ElemNameParser[backend.GetSupportDataSetResponse] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetSupportDataSetResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "getSupportDataSetResult")) ^^
      { case p1 =>
      backend.GetSupportDataSetResponse(p1.headOption map { scalaxb.fromXML[backend.GetSupportDataSetResult](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetSupportDataSetResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getSupportDataSetResult map { scalaxb.toXML[backend.GetSupportDataSetResult](_, Some("http://WebXml.com.cn/"), Some("getSupportDataSetResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetWeatherbyCityNameFormat extends scalaxb.ElemNameParser[backend.GetWeatherbyCityName] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetWeatherbyCityName] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "theCityName")) ^^
      { case p1 =>
      backend.GetWeatherbyCityName(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetWeatherbyCityName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.theCityName map { scalaxb.toXML[String](_, Some("http://WebXml.com.cn/"), Some("theCityName"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetWeatherbyCityNameResponseFormat extends scalaxb.ElemNameParser[backend.GetWeatherbyCityNameResponse] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetWeatherbyCityNameResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "getWeatherbyCityNameResult")) ^^
      { case p1 =>
      backend.GetWeatherbyCityNameResponse(p1.headOption map { scalaxb.fromXML[backend.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetWeatherbyCityNameResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getWeatherbyCityNameResult map { scalaxb.toXML[backend.ArrayOfString](_, Some("http://WebXml.com.cn/"), Some("getWeatherbyCityNameResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetWeatherbyCityNameProFormat extends scalaxb.ElemNameParser[backend.GetWeatherbyCityNamePro] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetWeatherbyCityNamePro] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "theCityName")) ~ 
      opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "theUserID")) ^^
      { case p1 ~ p2 =>
      backend.GetWeatherbyCityNamePro(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetWeatherbyCityNamePro, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.theCityName map { scalaxb.toXML[String](_, Some("http://WebXml.com.cn/"), Some("theCityName"), __scope, false) } getOrElse {Nil},
        __obj.theUserID map { scalaxb.toXML[String](_, Some("http://WebXml.com.cn/"), Some("theUserID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_GetWeatherbyCityNameProResponseFormat extends scalaxb.ElemNameParser[backend.GetWeatherbyCityNameProResponse] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.GetWeatherbyCityNameProResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://WebXml.com.cn/"), "getWeatherbyCityNameProResult")) ^^
      { case p1 =>
      backend.GetWeatherbyCityNameProResponse(p1.headOption map { scalaxb.fromXML[backend.ArrayOfString](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: backend.GetWeatherbyCityNameProResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.getWeatherbyCityNameProResult map { scalaxb.toXML[backend.ArrayOfString](_, Some("http://WebXml.com.cn/"), Some("getWeatherbyCityNameProResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultBackend_DataSetFormat extends scalaxb.ElemNameParser[backend.DataSet] {
    val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[backend.DataSet] =
      phrase((any(_ => true)) ~ 
      (any(_ => true)) ^^
      { case p1 ~ p2 =>
      backend.DataSet(scalaxb.fromXML[scalaxb.DataRecord[Any]](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[scalaxb.DataRecord[Any]](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: backend.DataSet, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.schema) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get,
        (Some(__obj.any) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get)

  }


  trait WeatherWebServiceSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://WebXml.com.cn/")
    lazy val service: backend.WeatherWebServiceSoap = new WeatherWebServiceSoap12Binding {}
    def baseAddress = new java.net.URI("http://www.webxml.com.cn/WebServices/WeatherWebService.asmx")

    trait WeatherWebServiceSoap12Binding extends backend.WeatherWebServiceSoap {
      import scalaxb.ElemName._
      def getSupportCity(byProvinceName: Option[String]): Future[backend.GetSupportCityResponse] = 
        soapClient.requestResponse(scalaxb.toXML(backend.GetSupportCity(byProvinceName), Some("http://WebXml.com.cn/"), "getSupportCity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://WebXml.com.cn/getSupportCity"))).transform({ case (header, body) => 
            scalaxb.fromXML[backend.GetSupportCityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportCityResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def getSupportProvince(): Future[backend.GetSupportProvinceResponse] = 
        soapClient.requestResponse(scalaxb.toXML(backend.GetSupportProvince(), Some("http://WebXml.com.cn/"), "getSupportProvince", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://WebXml.com.cn/getSupportProvince"))).transform({ case (header, body) => 
            scalaxb.fromXML[backend.GetSupportProvinceResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportProvinceResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def getSupportDataSet(): Future[backend.GetSupportDataSetResponse] = 
        soapClient.requestResponse(scalaxb.toXML(backend.GetSupportDataSet(), Some("http://WebXml.com.cn/"), "getSupportDataSet", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://WebXml.com.cn/getSupportDataSet"))).transform({ case (header, body) => 
            scalaxb.fromXML[backend.GetSupportDataSetResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getSupportDataSetResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def getWeatherbyCityName(theCityName: Option[String]): Future[backend.GetWeatherbyCityNameResponse] = 
        soapClient.requestResponse(scalaxb.toXML(backend.GetWeatherbyCityName(theCityName), Some("http://WebXml.com.cn/"), "getWeatherbyCityName", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://WebXml.com.cn/getWeatherbyCityName"))).transform({ case (header, body) => 
            scalaxb.fromXML[backend.GetWeatherbyCityNameResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getWeatherbyCityNameResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def getWeatherbyCityNamePro(theCityName: Option[String], theUserID: Option[String]): Future[backend.GetWeatherbyCityNameProResponse] = 
        soapClient.requestResponse(scalaxb.toXML(backend.GetWeatherbyCityNamePro(theCityName, theUserID), Some("http://WebXml.com.cn/"), "getWeatherbyCityNamePro", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://WebXml.com.cn/getWeatherbyCityNamePro"))).transform({ case (header, body) => 
            scalaxb.fromXML[backend.GetWeatherbyCityNameProResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "getWeatherbyCityNameProResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
    }
  }



}

